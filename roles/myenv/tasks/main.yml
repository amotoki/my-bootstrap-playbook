---
- name: Include site-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "../../../secrets.yml"
    - "../vars/secrets_dummy.yml"
  no_log: yes

- name: Copy dot files
  copy:
    src: "dotfiles/{{item}}"
    dest: "{{home}}/{{item}}"
    backup: yes
  with_items:
    - .bash_completion
    - .exrc
    - .lv
    - .screenrc
    - .tmux.conf
- name: Copy dot files
  template:
    src: "dotfiles/{{item}}"
    dest: "{{home}}/{{item}}"
    backup: yes
  with_items:
    - .bashrc
    - .emacs
    - .gitconfig
    - .profile

- name: Create ~/.bashrc.d
  file:
    path: "{{home}}/.bashrc.d"
    state: directory
- name: Copy jenkins to bashrc.d
  copy:
    src: bashrc.d/jenkins
    dest: "{{home}}/.bashrc.d/jenkins"
  when: jenkins_cli is defined

- name: Create .ssh directory
  file:
    path: "{{home}}/.ssh"
    mode: 0700
    state: directory

- name: Setup SSH configs
  copy:
    src: "ssh/{{item}}"
    dest: "{{home}}/.ssh/{{item}}"
    backup: yes
  with_items:
    - authorized_keys
    - config

- name: Deploy Transifex RC
  template:
    src: transifexrc.j2
    dest: "{{ home }}/.transifexrc"
    mode: 0600
    backup: yes
  when: transifex_username is defined and transifex_password is defined

- name: Ensure ~/.config
  file:
    path: "{{home}}/.config"
    state: directory

- name: Deploy Zanata config
  template:
    src: zanata.ini.j2
    dest: "{{ home }}/.config/zanata.ini"
    mode: 0600
    backup: yes
  when: zanata_username is defined and zanata_apikey is defined

- name: Setup SSH key pairs
  copy:
    content: "{{ item.key }}"
    dest: "{{ home }}/.ssh/{{ item.name }}"
    mode: "0400"
    backup: yes
  with_items: "{{ ssh_key_pairs }}"
  when: ssh_key_pairs is defined
  no_log: yes

- name: Create bin directory
  file:
    path: "{{home}}/bin"
    mode: 0755
    state: directory

- name: Copy useful scripts
  copy:
    src: "bin/{{item}}"
    dest: "{{home}}/bin/{{item}}"
    mode: 0755
    backup: yes
  with_items:
    - Emacs
    - agent-check.sh

- name: Install Emacs Lisp files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    backup: yes
  with_items:
    - src: elisp
      dest: "{{ home }}"
    - src: elisp-auto-install/
      dest: "{{ home }}/.emacs.d/auto-install"

- name: create virtualenvwrapper directory
  file:
    path: "{{ home }}/.virtualenvs"
    state: directory

- name: install virtualenvwrapper postmkvirtualenv
  copy:
    content: |
      #!/bin/bash
      # This hook is sourced after a new virtualenv is activated.
      pip install ipython bpython
    dest: "{{ home }}/.virtualenvs/postmkvirtualenv"
    mode: 0755

- name: Create .mytools directory
  file:
    path: "{{ home }}/.mytools"
    state: directory

- name: git clone dircolors-solarized.git
  git:
    repo: https://github.com/seebi/dircolors-solarized.git
    dest: "{{ home }}/.mytools/dircolors-solarized"
    force: no

- name: Create ~/.dircolors
  file:
    state: link
    src: "{{ home }}/.mytools/dircolors-solarized/dircolors.ansi-universal"
    dest: "{{ home }}/.dircolors"

- name: Create .bashrc.d/dircolors
  copy:
    src: bashrc.d/ls_dircolors
    dest: "{{home}}/.bashrc.d"

- name: Create directories for cloned git repositories
  file:
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ home }}/src/opendev.org/openstack"
    - "{{ home }}/src/opendev.org/x"
    - "{{ home }}/src/github.com"
